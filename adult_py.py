# -*- coding: utf-8 -*-
"""adult.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1iWVCv3kvxncSFSRVdmfmHJYwgPZas3yA
"""

#Import Required Libraries
import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt

from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder, StandardScaler
from sklearn.metrics import accuracy_score, confusion_matrix, classification_report

from sklearn.linear_model import LogisticRegression
from sklearn.tree import DecisionTreeClassifier
from sklearn.ensemble import RandomForestClassifier
from sklearn.neighbors import KNeighborsClassifier
from sklearn.svm import SVC

# Load and Inspect Dataset
df = pd.read_csv("adult 3.csv")
print("Dataset Shape:", df.shape)
df.head()

#Data Cleaning & Preprocessing
# Replace '?' with NaN and drop rows with missing values
df.replace("?", np.nan, inplace=True)
df.dropna(inplace=True)

# Drop 'fnlwgt' if it exists
if 'fnlwgt' in df.columns:
    df.drop('fnlwgt', axis=1, inplace=True)

# Encode categorical features using Label Encoding
le = LabelEncoder()
for column in df.select_dtypes(include='object'):
    df[column] = le.fit_transform(df[column])

#Feature Selection & Splitting
X = df.drop('income', axis=1)
y = df['income']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=1)

#Feature Scaling
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

# Load and Inspect Dataset
df = pd.read_csv("adult 3.csv")

#Data Cleaning & Preprocessing
# Replace '?' with NaN and drop rows with missing values
df.replace("?", np.nan, inplace=True)
df.dropna(inplace=True)

# Drop 'fnlwgt' if it exists
if 'fnlwgt' in df.columns:
    df.drop('fnlwgt', axis=1, inplace=True)

# Encode categorical features using Label Encoding
le = LabelEncoder()
for column in df.select_dtypes(include='object'):
    df[column] = le.fit_transform(df[column])

#Feature Selection & Splitting (added for standalone execution)
X = df.drop('income', axis=1)
y = df['income']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=1)

#Feature Scaling (added for standalone execution)
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)


#Model Training & Evaluation
models = {
    "Logistic Regression": LogisticRegression(),
    "Decision Tree": DecisionTreeClassifier(),
    "Random Forest": RandomForestClassifier(),
    "K-Nearest Neighbors": KNeighborsClassifier(n_neighbors=5),
    "Support Vector Machine": SVC()
}

for name, model in models.items():
    print(f"\nModel: {name}")

    # Use scaled data for SVM and KNN
    if name in ["K-Nearest Neighbors", "Support Vector Machine"]:
        model.fit(X_train_scaled, y_train)
        y_pred = model.predict(X_test_scaled)
    else:
        model.fit(X_train, y_train)
        y_pred = model.predict(X_test)

    print("Accuracy:", accuracy_score(y_test, y_pred))
    print("Classification Report:\n", classification_report(y_test, y_pred))

# Load and Inspect Dataset
df = pd.read_csv("adult 3.csv")

#Data Cleaning & Preprocessing
# Replace '?' with NaN and drop rows with missing values
df.replace("?", np.nan, inplace=True)
df.dropna(inplace=True)

# Drop 'fnlwgt' if it exists
if 'fnlwgt' in df.columns:
    df.drop('fnlwgt', axis=1, inplace=True)

# Encode categorical features using Label Encoding
le = LabelEncoder()
for column in df.select_dtypes(include='object'):
    df[column] = le.fit_transform(df[column])

#Feature Selection & Splitting (added for standalone execution)
X = df.drop('income', axis=1)
y = df['income']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=1)

#Feature Scaling (added for standalone execution)
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

#Visualizing the Confusion Matrix
# Get the predictions for the Random Forest model
rf_model = RandomForestClassifier() # Re-instantiate the model
rf_model.fit(X_train, y_train)
y_pred_rf = rf_model.predict(X_test)

sns.heatmap(confusion_matrix(y_test, y_pred_rf), annot=True, fmt='d', cmap='Blues')
plt.title("Confusion Matrix - Random Forest")
plt.xlabel("Predicted")
plt.ylabel("Actual")
plt.show()